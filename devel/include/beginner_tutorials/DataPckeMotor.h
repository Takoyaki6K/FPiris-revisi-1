// Generated by gencpp from file beginner_tutorials/DataPckeMotor.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_DATAPCKEMOTOR_H
#define BEGINNER_TUTORIALS_MESSAGE_DATAPCKEMOTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beginner_tutorials
{
template <class ContainerAllocator>
struct DataPckeMotor_
{
  typedef DataPckeMotor_<ContainerAllocator> Type;

  DataPckeMotor_()
    : titikX(0)
    , titikY(0)
    , target_sudut(0)
    , kecepatan_x(0)
    , kecepatan_y(0)
    , kecepatan_theta(0)  {
    }
  DataPckeMotor_(const ContainerAllocator& _alloc)
    : titikX(0)
    , titikY(0)
    , target_sudut(0)
    , kecepatan_x(0)
    , kecepatan_y(0)
    , kecepatan_theta(0)  {
  (void)_alloc;
    }



   typedef int16_t _titikX_type;
  _titikX_type titikX;

   typedef int16_t _titikY_type;
  _titikY_type titikY;

   typedef int16_t _target_sudut_type;
  _target_sudut_type target_sudut;

   typedef int16_t _kecepatan_x_type;
  _kecepatan_x_type kecepatan_x;

   typedef int16_t _kecepatan_y_type;
  _kecepatan_y_type kecepatan_y;

   typedef int16_t _kecepatan_theta_type;
  _kecepatan_theta_type kecepatan_theta;





  typedef boost::shared_ptr< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> const> ConstPtr;

}; // struct DataPckeMotor_

typedef ::beginner_tutorials::DataPckeMotor_<std::allocator<void> > DataPckeMotor;

typedef boost::shared_ptr< ::beginner_tutorials::DataPckeMotor > DataPckeMotorPtr;
typedef boost::shared_ptr< ::beginner_tutorials::DataPckeMotor const> DataPckeMotorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beginner_tutorials::DataPckeMotor_<ContainerAllocator1> & lhs, const ::beginner_tutorials::DataPckeMotor_<ContainerAllocator2> & rhs)
{
  return lhs.titikX == rhs.titikX &&
    lhs.titikY == rhs.titikY &&
    lhs.target_sudut == rhs.target_sudut &&
    lhs.kecepatan_x == rhs.kecepatan_x &&
    lhs.kecepatan_y == rhs.kecepatan_y &&
    lhs.kecepatan_theta == rhs.kecepatan_theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beginner_tutorials::DataPckeMotor_<ContainerAllocator1> & lhs, const ::beginner_tutorials::DataPckeMotor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cefda5650f612b3eb74c90eb8fd012ef";
  }

  static const char* value(const ::beginner_tutorials::DataPckeMotor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcefda5650f612b3eULL;
  static const uint64_t static_value2 = 0xb74c90eb8fd012efULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner_tutorials/DataPckeMotor";
  }

  static const char* value(const ::beginner_tutorials::DataPckeMotor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 titikX\n"
"int16 titikY\n"
"int16 target_sudut\n"
"int16 kecepatan_x\n"
"int16 kecepatan_y\n"
"int16 kecepatan_theta\n"
;
  }

  static const char* value(const ::beginner_tutorials::DataPckeMotor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.titikX);
      stream.next(m.titikY);
      stream.next(m.target_sudut);
      stream.next(m.kecepatan_x);
      stream.next(m.kecepatan_y);
      stream.next(m.kecepatan_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DataPckeMotor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::DataPckeMotor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner_tutorials::DataPckeMotor_<ContainerAllocator>& v)
  {
    s << indent << "titikX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.titikX);
    s << indent << "titikY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.titikY);
    s << indent << "target_sudut: ";
    Printer<int16_t>::stream(s, indent + "  ", v.target_sudut);
    s << indent << "kecepatan_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.kecepatan_x);
    s << indent << "kecepatan_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.kecepatan_y);
    s << indent << "kecepatan_theta: ";
    Printer<int16_t>::stream(s, indent + "  ", v.kecepatan_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_DATAPCKEMOTOR_H
